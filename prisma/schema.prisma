generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @map("user_id") @db.Char(36)
  email         String    @unique
  photo_profile String?
  name          String
  clasess       Class?
  title         Title?
  detail        Int?
  absent        String?
  Phone         String?
  role          Role      @default(SISWA)
  status        Status    @default(NOTGRADUATE)
  gender        Gender?   @default(Male)
  userAuth      UserAuth?
  taskValidator fileWork[] @relation("task_validator")
  Sugestion     String?
  ClassNumber   String?
  validatorId   String?
  File          fileWork[] @relation("file_id")
  validator       User?     @relation("teacherToStudent", fields: [validatorId], references: [id])
  user       User[]    @relation("teacherToStudent")
}

model fileWork{
  id        String      @id @default(uuid()) @map("file_id") @db.Char(36)
  filename  String
  mimetype  String
  size      Int
  status    RequestStatus @default(PENDING)
  userId    String 
  TaskValidator   User[]    @relation("task_validator")
  user      User?    @relation("file_id", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  path      String
  genre     String?
  createdAt DateTime @default(now())
}

enum Class {
  X
  XI
  XII
}

enum Title {
  RPL
  PG
  TKJ
}

model UserAuth {
  id         String    @id @default(uuid()) @map("userauth_id") @db.Char(36)
  password   String?
  last_login DateTime?
  userEmail  String    @unique
  user       User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}


enum Status {
  NOTGRADUATE
  GRADUATE
}

enum Role {
  SISWA
  GURU
  ADMIN
}

enum Gender {
  Male
  Female
}

enum RequestStatus {
  PENDING
  VERIFIED
  DENIED
}
